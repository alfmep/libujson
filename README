
libujson - A JSON library for C++ developers, and utility applications for handling JSON documents.

Features:
 * Efficient JSON parsing.
 * Supports JSON numbers with arbitrary precision (if built with gmpxx, which is default).
 * Utility applications for handling JSON documents.
 * Simple to use C++ interface to access and manage JSON documents and types.
 * Validate JSON documents using JSON Schemas.
 * Use JSON pointers (RFC6901) to access data in JSON documents.
 * Patch JSON documents with JSON patches as described in RFC6902.
 * API documentation (if configured with --enable-doxygen).
 * Support for a "relaxed" format of JSON documents, but uses strict format (RFC8259) as default.
   In relaxed format, the following is allowed in JSON documents:
   - C-style comments.
   - String values can be split up into more than one string separated by whitespace or comments (like in C/C++).
   - Object definitions are allowed to end with a separator(,).
   - Array items are allowed to end with a separator(,).
   - In object definitions, a member name can be an 'identifier' instead of a string enclosed by double quotes.
     An identifier is a name with the following format: [_a-zA-Z][_a-zA-Z0-9]*
     Exceptions are: true, false, and null (case insensitive).
     Those names are reserved and not allowed to be used as identifiers (i.e. without enclosing double quotes).
   For an example of a JSON document in relaxed form, see file 'example-document-in-relaxed-form.json'.


Utility applications for handling JSON documents:

ujson-verify - Verify the syntax of one or more JSON documents. Can also validate JSON documents using a JSON schema.
ujson-get    - Get a specific value from a JSON document using a JSON pointer. JSON pointers are described in RFC 6901.
ujson-cmp    - Check if two JSON documents are equal.
ujson-print  - Print a JSON document to standard output in a few different ways.
ujson-patch  - Patch JSON documents. JSON patches are described in RFC 6902.


When building with gmpxx (which is default if gmpxx is found by the configure script),
libujson supports numbers with arbitrary precision in JSON documents.
An example of a JSON document supported by libujson without losing precision:
{
    "numbers": [
        {
            "name": "e",
            "description": "Euler's number. The limit of (1 + 1/n)^n as n approaches infinity.",
            "value": 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746
        },
        {
            "name": "pi",
            "description": "The ratio of a circle's circumference to its diameter.",
            "value": 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214
        }
    ]
}



How to build:

In no configure script is present, first run:
./autogen.sh

then:

./configure
make
make install


To generate and install API documentation using doxygen, configure with parameter --enable-doxygen:

./configure --enable-doxygen


To see all configuration parameters, run:

./configure --help
