%{
//
// Copyright (C) 2017,2019-2023 Dan Arrhenius <dan@ultramarin.se>
//
// This file is part of ujson.
//
// ujson is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
//
%}
%{
#include <cerrno>
#include <climits>
#include <cstdlib>
#include <string>
#include <ujson/Parser.hpp>
#include <Analyzer.hpp>

#define YYSTYPE std::string

// Update location on matching
#define YY_USER_ACTION parser.loc().step(); parser.loc().columns(yyget_leng(yyscanner));
%}


%option prefix="uj"
%option outfile="Lexer.cpp"
%option header-file="Lexer.hpp"
%option noyywrap
%option 8bit
%option batch
%option noinput
%option nounput
%option reentrant

NEWLINE [\n]
NEWLINES {NEWLINE}+

LINE_COMMENT \/\/.*
MULTILINE_COMMENT \/\*([^*]|(\*+[^*/]))*\*+\/
COMMENT {LINE_COMMENT}|{MULTILINE_COMMENT}

ZERO [0]
ONE_TO_NINE [1-9]
DIGIT [0-9]
HEX_DIGIT [0-9a-fA-F]
DIGITS {DIGIT}+
OPTIONAL_DIGITS {DIGIT}*
MINUS [-]
SIGN [+-]
FRAC [.]{DIGITS}
EXP [eE]{SIGN}?{DIGITS}

GREATER_THAN_ZERO {ONE_TO_NINE}{OPTIONAL_DIGITS}
POSITIVE_INTEGER {ZERO}|{GREATER_THAN_ZERO}
INTEGER {MINUS}?{POSITIVE_INTEGER}
DOUBLE {INTEGER}{FRAC}|{INTEGER}{EXP}|{INTEGER}{FRAC}{EXP}
NUMBER {INTEGER}|{DOUBLE}

DBL_QUOTE [\"]
WHITESPACE [\t\r ]+

ASCII [\x20-\x21\x23-\x5b\x5d-\x7f]

U     [\x80-\xbf]
U2    [\xc2-\xdf]
U3    [\xe0-\xef]
U4    [\xf0-\xf4]
ESCAPED_CHAR \\[\"\\bfnrt/]
ESCAPED_UNICODE_CHAR \\u{HEX_DIGIT}{HEX_DIGIT}{HEX_DIGIT}{HEX_DIGIT}
UANY {ASCII}|{U2}{U}|{U3}{U}{U}|{U4}{U}{U}{U}
CHAR {UANY}|{ESCAPED_CHAR}|{ESCAPED_UNICODE_CHAR}
CHARS {CHAR}*
STRING {DBL_QUOTE}{CHARS}{DBL_QUOTE}

IDENTIFIER [_a-zA-Z][_a-zA-Z0-9]*



%%
%{
    // Code run each time yylex is called.
%}

{COMMENT}      parser.on_lex_comment ();
\{             return parser.on_lex_lcbrack ();
\}             return parser.on_lex_rcbrack ();
\[             return parser.on_lex_lbrack ();
\]             return parser.on_lex_rbrack ();
,              return parser.on_lex_separator ();
:              return parser.on_lex_colon ();
null           return parser.on_lex_null ();
true           return parser.on_lex_true ();
false          return parser.on_lex_false ();
{STRING}       return parser.on_lex_string ();
{NUMBER}       return parser.on_lex_number ();
{WHITESPACE}   parser.on_lex_whitespace ();
{NEWLINES}     parser.on_lex_newline ();
{IDENTIFIER}   return parser.on_lex_identifier ();
.              parser.on_lex_error ();
<<EOF>>        return parser.on_lex_eof ();
%%
