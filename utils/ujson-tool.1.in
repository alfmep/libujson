.\" Manpage for ujson-tool
.\" Contact https://github.com/alfmep/libujson to correct errors or types.
.TH ujson-tool 1 "" "@CMAKE_PROJECT_NAME@ @libujson_VERSION_MAJOR@.@libujson_VERSION_MINOR@.@libujson_VERSION_PATCH@" "User Commands"


.SH NAME
ujson-tool \- View, validate, inspect, and modify JSON documents.


.SH SYNOPSIS
.B ujson-tool
COMMAND [OPTIONS] [COMMAND_ARGUMENTS ...]


.SH DESCRIPTION
ujson-tool is a tool to view, validate, inspect, and modify JSON documents and has several commands to handle JSON documents in a variety of ways.

All commands, except 'patch', reads a JSON document from standard input if no file is supplied.


.SH COMMON OPTIONS
.TP
.B -s, --strict
Parse JSON documents in strict mode.
.TP
.B -n, --no-duplicates
Don't allow objects with duplicate member names.
.TP
.B -p, --pointer=POINTER
Use the JSON instance pointed to by the JSON pointer instead of the root of the input JSON document.
.TP
.B -c, --compact
Any Resulting JSON output is printed without whitespaces.
.TP
.B -e, --escape-slash
In any resulting JSON string output, forward slash characters("/") are escaped to "\\/".
.TP
.B -a, --array-lines
In any resulting JSON output, print each array item on the same line.
.TP
.B -o, --color
Print resulting JSON in color if the output is to a tty.
This parameter is ignored if libujson is built without support for console colors.
.TP
.B --sort
Any Resulting JSON output is printed with object members sorted by name.
.TP
.B --max-depth=DEPTH
Set maximum nesting depth. Both objects and arrays increases the nesting depth.
A value of 0 means no limit. Default is no limit.
.TP
.B --max-asize=ITEMS
Set the maximum allowed number of elements in a single JSON array.
A value of 0 means no limit. Default is no limit.
.TP
.B --max-osize=ITEMS
Set the maximum allowed number of members in a single JSON object.
A value of 0 means no limit. Default is no limit.
.TP
.B -v, --version
Print version and exit.
.TP
.B -h, --help
Print help and exit.

.SH POINTER
A JSON Pointer as described in RFC 6901.
A pointer specifies a specific value in a JSON document. Is is a string containing zero or more reference tokens separated by '/'. If a '/' is part of a token it is encoded as '~1'. And if a '~' is parf of a token it is encoded as '~0'.


.SH COMMANDS:

.SH view [OPTIONS] [JSON_DOCUMENT]
Print the JSON instance to standard output.

Options:
.TP
.B -t, --type=TYPE
Require that the viewed instance is of a specific JSON type. If the resulting instance is of another type, an error message is printed to standard error and 1 is returned. Valid types are: object, array, string, number, boolean, and null.
.TP
.B -u, --unescape
Only if the resulting instance is a JSON string: print the string value, unescaped witout enclosing double quotes.


.SH type [OPTIONS] [JSON_DOCUMENT]
Print or check the JSON type of the instance.
Default is to write the JSON type of the instance to standard output. But if option '--type=TYPE' is used, the command will check if the JSON type of the instance is the same type as specified.

Options:
.TP
.B -t, --type=TYPE
Check if the JSON instance is of a specific JSON type.
If it is, print 'Yes' to standard output and return 0.
If not, print 'No' to standard output and return 1.
Valid types are: object, array, string, number, boolean, and null.
.TP
.B -q, --quiet
If option '--type' is used, don't print anything.


.SH size [OPTIONS] [JSON_DOCUMENT]
Print the number of elements/members to standard output if the JSON instance
is an array or object. If the JSON instance isn't an array or object,
an error message is printed to standard error and 1 is returned.
.br
.B Note:
It is not a recursive count. It is only the number of elements/members in the specified array/object,
not including sub-items of the array/object.

.SH members [OPTIONS] [JSON_DOCUMENT]
If the instance is a JSON object, print the object member names to standard output on separate lines.
If not a JSON object, print an error message to standard error and return 1.
Note that the member names are by default printed as unescaped string values, and a single
member name can thus be printed on multiple lines if it contains one or more line breaks.

Options:
.TP
.B -s, --sort
Sort the member names.
.TP
.B -m, --escape-members
Print the member names as JSON formatted strings.
The names are printed JSON escaped, enclosed by double quotes.
This will ensure that no member name is written on multiple
lines since newline characters are escaped.
This option is not needed if option '--json-array' is used.
.TP
.B -j, --json-array
Print the member names as a JSON formatted array.
Option '--escape-members' is implied by this option.


.SH patch [OPTIONS] JSON_DOCUMENT [JSON_PATCH_FILE]
Patch a JSON instance and print the result to standard output.
If option '--pointer=...' is used, the patch definition uses this position in
the input JSON document as the instance to patch, and the resulting output will
also be from this position. If no patch file is supplied, the patch definition
is read from standard input. Errors and failed patch operations are printed to
standard error. Returns 0 if all patches are successfully aplied, and 1 if not.
.br
JSON patches are described in RFC 6902.

Options:
.TP
.B -q, --quiet
Don't print failed patch operations to standard error, only return 1.
Also, if all patch operations are of type 'test', don't print the
resulting JSON document to standard output.


.SH verify [OPTIONS] [JSON_DOCUMENT]
Verify the syntax of the JSON document.
Prints "Ok" to standard output and return 0 if the input is a valid JSON document, and successfully validated using a JSON Schema (if one is supplied).
Prints an error message to standard error and return 1 if the input is not a valid JSON document, or if not successfully validated using a JSON Schema.
.br
Common option '--pointer=POINTER' is ignored by this command.
.br
Common option '--sort' is ignored by this command.

Options:
.TP
.B --schema=SCHEMA_FILE
Validate the JSON document using a JSON Schema.
This option may be set multiple times. The first schema file is the main schema used to validate the JSON document. More schema files can then be added that can be referenced by the main and other schema files.
.TP
.B -q, --quiet
Print nothing, only return 0 on success, and 1 on error.
.TP
.B -d, --debug
Print verbose schema validation information. This option is ignored if option --quiet is set.
.TP
.B -f, --full-validation
If verbose mode and a JSON schema is used, show all failed validation tests, not only the first.


.SH SEE ALSO
ujson-cmp(1) ujson-get(1) ujson-patch(1) ujson-print(1) ujson-verify(1)


.SH AUTHOR
Dan Arrhenius (https://github.com/alfmep/libujson)
