.\" Manpage for ujson-verify
.\" Contact https://github.com/alfmep/libujson to correct errors or types.
.TH ujson-verify 1 "" "@CMAKE_PROJECT_NAME@ @libujson_VERSION_MAJOR@.@libujson_VERSION_MINOR@.@libujson_VERSION_PATCH@" "User Commands"


.SH NAME
ujson-verify \- Check for errors in a JSON document


.SH SYNOPSIS
.B ujson-verify
[OPTIONS...] [FILE...]


.SH DESCRIPTION
ujson-verify is a utility used for verifying that JSON documents are syntactically correct. And optionally validate the JSON document use a JSON schema. If all the files on the command line are successfully verified, ujson-verify exits with code 0. If any file fails verification, ujson-verify exits with code 1. If no file name is given, a JSON document is read from standard input.


.SH OPTIONS

.TP
.B -q, --quiet
Silent mode, don't write anything to standard output.

.TP
.B -c, --schema=SCHEMA_FILE
Validate the JSON document using a JSON schema file.
This option may be set multiple times.
The first schema file is the main schema used to validate the JSON document.
More schema files can then be added that can be referenced by the main and other schema files.

.TP
.B -d, --verbose
Verbose mode. Print verbose schema validation output.

.TP
.B -s, --strict
Parse JSON documents in strict mode.

.TP
.B -n, --no-duplicates
Don't allow objects with duplicate member names.

.TP
.B --max-depth=DEPTH
Set maximum nesting depth. Both objects and arrays increases the nesting depth.
A value of 0 means no limit. Default is no limit.

.TP
.B --max-asize=ITEMS
Set the maximum allowed number of elements in a single JSON array.
A value of 0 means no limit. Default is no limit.

.TP
.B --max-osize=ITEMS
Set the maximum allowed number of members in a single JSON object.
A value of 0 means no limit. Default is no limit.

.TP
.B -v, --version
Print version and exit.

.TP
.B -h, --help
Print help and exit.


.SH NOTES
By default JSON documents are verified using relaxed format.
To verified using the official JSON syntax, use option '-s, --strict'.
.PP
The following is allowed in JSON documents when relaxed format is used:

.nf
- C-style comments.
- String values can be split up into more than one string separated by whitespace or comments.
- Object definitions are allowed to end with a separator(,).
- Array items are allowed to end with a separator(,).
- In object definitions, a member name can be an identifier instead of a string.
  An identifier is a name with the following format: [_a-zA-Z][_a-zA-Z0-9]*
  Exceptions are: true, false, and null (case insensitive).
  Those names are reserved and are not allowed to be used as identifiers (i.e. without enclosing double quotes).

.PP
Example of a JSON document that is allowed in relaxed mode:

.EX
{
    /*
     * An invalid JSON syntax in strict mode, but allowed in relaxed mode.
     */
    name: "relaxed document",
    value: 42,
    desc: "Some text here",
    "normal_member_name": "Another string",

    // The following object member name must be enclosed by
    // double quotes since 'null' is a reserved word.
    "null": 0,

    long_string: "This string value is split "     // This can be used to
                 "up in more than one line that, " // make it more readable
                 "when parsed, will be a single "  // when editing.
                 "long string value.",

    // Note that the last array item can end with a separator
    list_of_values: [1, 2, 3, 4, 5, 6, 7,],

    // Also, the last object member can end with a separator
    last_member: true,
}
.EE


.SH SEE ALSO
ujson-cmp(1) ujson-get(1) ujson-patch(1) ujson-print(1) ujson-tool(1)


.SH AUTHOR
Dan Arrhenius (https://github.com/alfmep/libujson)
